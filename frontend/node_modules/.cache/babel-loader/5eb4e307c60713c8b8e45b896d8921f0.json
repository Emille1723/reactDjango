{"ast":null,"code":"var _jsxFileName = \"/home/emilleh/projects/React/github/react-redux/src/components/form.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { actionCreators } from '../state/index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Form = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const [amount, setAmount] = useState(\"\");\n  const [transaction, setTransaction] = useState(\"\"); // const [deposit, setDeposit] = useState(false);\n  // const [withdraw, setWithdraw] = useState(false);\n\n  const submittedData = {\n    amount: '',\n    transactionType: ''\n  };\n  const {\n    newTransaction,\n    transDeposit,\n    transWithdraw\n  } = bindActionCreators(actionCreators, dispatch); // isSelected is a boolean that updates once an account is checked\n\n  const isSelect = useSelector(state => state.user.isSelected); // user state\n\n  const user = useSelector(state => state.user.user);\n\n  const handleRadios = evt => {\n    submittedData.transactionType = evt.target.value;\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    submittedData.amount = amount;\n\n    if (submittedData.transactionType === '') {\n      alert('Unable to process function, ensure that the form is completed');\n    } else {\n      setAmount('');\n      evt.target.reset();\n      initBank(submittedData);\n      newTransaction(submittedData);\n    }\n  };\n\n  const initBank = formData => {\n    {\n      formData.transactionType === \"Deposit\" ? transDeposit(submittedData.amount) : transWithdraw(submittedData.amount);\n      updateUser();\n    }\n    ;\n  };\n\n  const updateUser = () => {\n    console.log('user updated => ', user);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"form\",\n    autoComplete: \"off\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"form--title\",\n      children: \"banking transactions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 4\n    }, this), isSelect ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"form--selected--user\",\n        children: [\"account selected => \", user.firstName, \" \", user.lastName, \"  \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 72\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 78\n        }, this), \"  current balance =>   $\", user.amount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form--input--wrapper\",\n        name: \"text\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\" // className=\"form--input\"\n          ,\n          className: `form--input`,\n          value: amount,\n          onChange: evt => setAmount(evt.target.value),\n          pattern: \"[0-9]{1,10000}\",\n          name: \"text--amount\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"form--input--label amount--input--label\",\n          children: \"amount to be tendered\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form--input--wrapper\",\n        name: \"radio\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          className: \"form--input\",\n          name: \"radios\",\n          id: \"radio--deposit\",\n          value: \"Deposit\",\n          onChange: handleRadios // onChange = {(evt) => setDeposit(evt.target.value)}\n          // onChange = {(evt) => setDeposit(evt.currentTarget.checked)}\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"radio--deposit\",\n          className: \"form--input--label\",\n          children: \"deposit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          className: \"form--input\",\n          name: \"radios\",\n          id: \"radio--withdraw\",\n          value: \"Withdraw\",\n          onChange: handleRadios // onChange = {(evt) => setDeposit(evt.target.value)}\n          // onChange = {(evt) => setWithdraw(evt.currentTarget.checked)}\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"radio--withdraw\",\n          className: \"form--input--label\",\n          children: \"withdraw\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        className: \"form--submit\",\n        value: \"complete transaction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"form--selected--user\",\n      children: \"select an account to perform a transaction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 5\n    }, this), \";\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Form, \"CYpMX+Gay897x1qmDGVc0PL3Yqg=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["/home/emilleh/projects/React/github/react-redux/src/components/form.js"],"names":["React","useState","useSelector","useDispatch","bindActionCreators","actionCreators","Form","dispatch","amount","setAmount","transaction","setTransaction","submittedData","transactionType","newTransaction","transDeposit","transWithdraw","isSelect","state","user","isSelected","handleRadios","evt","target","value","handleSubmit","preventDefault","alert","reset","initBank","formData","updateUser","console","log","firstName","lastName"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { bindActionCreators } from 'redux';\nimport { actionCreators } from '../state/index';\n\n\n\n\nconst Form = () => {\n\tconst dispatch = useDispatch();\n\tconst [amount, setAmount] = useState(\"\");\n\tconst [transaction, setTransaction] = useState(\"\");\n\t// const [deposit, setDeposit] = useState(false);\n\t// const [withdraw, setWithdraw] = useState(false);\n\n\tconst submittedData = {\n\t\tamount : '',\n\t\ttransactionType : '',\n\t};\n\n\tconst { newTransaction,  transDeposit, transWithdraw} = bindActionCreators(actionCreators, dispatch);\n\n\t// isSelected is a boolean that updates once an account is checked\n\tconst isSelect = useSelector( (state) => state.user.isSelected );\n\n\t// user state\n\tconst user = useSelector( (state) => state.user.user );\n\n\n\n\tconst handleRadios = evt => {\n\t\tsubmittedData.transactionType = evt.target.value;\n\t}\n\t\n\n\tconst handleSubmit = evt => {\n\t\tevt.preventDefault();\n\t\tsubmittedData.amount = amount;\n\n\t\tif(submittedData.transactionType === ''){\n\t\t\talert('Unable to process function, ensure that the form is completed');\n\t\t}\n\t\telse{\n\t\t\tsetAmount('');\n\t\t\tevt.target.reset();\n\t\t\tinitBank(submittedData);\n\t\t\tnewTransaction(submittedData);\n\t\t}\n\t}\n\n\tconst initBank = (formData) => {\n\t\t{\n\t\t\tformData.transactionType === \"Deposit\" ? (\n\t\t\t\ttransDeposit(submittedData.amount)\n\t\t\t):(\n\t\t\t\ttransWithdraw(submittedData.amount)\n\t\t\t)\n\t\t\tupdateUser();\n\t\t};\n\t}\n\n\tconst updateUser = () => {\n\t\tconsole.log('user updated => ', user);\n\t}\n\n\n\treturn (\n\t\t<form className=\"form\" autoComplete=\"off\" onSubmit={handleSubmit}>\n\t\t\t<span className=\"form--title\">banking transactions</span>\n\t\t\t{isSelect \n\t\t\t?(\t\n\t\t\t\t<>\n\t\t\t\t\t<span className=\"form--selected--user\">\n\t\t\t\t\t\taccount selected &#61;&gt; { user.firstName\t} {\tuser.lastName }  <br/> <br/>  current balance &#61;&gt;   ${ user.amount }\n\t\t\t\t\t</span>\n\t\t\t\t\t<div className=\"form--input--wrapper\" name=\"text\">\n\t\t\t\t\t\t<input \n\t\t\t\t\t\t\ttype=\"text\" \n\t\t\t\t\t\t\t// className=\"form--input\"\n\t\t\t\t\t\t\tclassName={`form--input`}\n\t\t\t\t\t\t\tvalue = {amount}\n\t\t\t\t\t\t\tonChange = { (evt) => setAmount(evt.target.value) } \n\t\t\t\t\t\t\tpattern=\"[0-9]{1,10000}\"\n\t\t\t\t\t\t\tname=\"text--amount\"\n\t\t\t\t\t\t\trequired\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<label className=\"form--input--label amount--input--label\">amount to be tendered</label>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"form--input--wrapper\" name=\"radio\">\n\t\t\t\t\t\t<input \n\t\t\t\t\t\t\ttype=\"radio\" \n\t\t\t\t\t\t\tclassName=\"form--input\"\n\t\t\t\t\t\t\tname=\"radios\"\n\t\t\t\t\t\t\tid=\"radio--deposit\"\n\t\t\t\t\t\t\tvalue = \"Deposit\"\n\t\t\t\t\t\t\tonChange = {handleRadios}\n\t\t\t\t\t\t\t// onChange = {(evt) => setDeposit(evt.target.value)}\n\t\t\t\t\t\t\t// onChange = {(evt) => setDeposit(evt.currentTarget.checked)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<label \n\t\t\t\t\t\t\thtmlFor=\"radio--deposit\" \n\t\t\t\t\t\t\tclassName=\"form--input--label\">deposit</label>\n\t\t\t\t\t\t<input \n\t\t\t\t\t\t\ttype=\"radio\" \n\t\t\t\t\t\t\tclassName=\"form--input\" \n\t\t\t\t\t\t\tname=\"radios\"\n\t\t\t\t\t\t\tid=\"radio--withdraw\"\n\t\t\t\t\t\t\tvalue = \"Withdraw\"\n\t\t\t\t\t\t\tonChange = {handleRadios}\n\t\t\t\t\t\t\t// onChange = {(evt) => setDeposit(evt.target.value)}\n\t\t\t\t\t\t\t// onChange = {(evt) => setWithdraw(evt.currentTarget.checked)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<label \n\t\t\t\t\t\t\thtmlFor=\"radio--withdraw\" \n\t\t\t\t\t\t\tclassName=\"form--input--label\">withdraw</label>\n\t\t\t\t\t</div>\n\t\t\t\t\t<input type=\"submit\" className=\"form--submit\" value=\"complete transaction\"/>\n\t\t\t\t</>\n\t\t\t\t)\n\t\t\t: (\n\t\t\t\t<span className=\"form--selected--user\">\n\t\t\t \t\tselect an account to perform a transaction\n\t\t\t\t</span>\n\t\t\t)};\n\t\t</form>\n\t)\n}\n\nexport default Form;\n"]},"metadata":{},"sourceType":"module"}