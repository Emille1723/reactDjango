{"ast":null,"code":"var _jsxFileName = \"/home/emilleh/projects/React/github/react-redux/src/components/form.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { actionCreators } from '../state/index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Form = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const [amount, setAmount] = useState(\"\");\n  const [transaction, setTransaction] = useState(\"\"); // const [deposit, setDeposit] = useState(false);\n  // const [withdraw, setWithdraw] = useState(false);\n  // const submittedData = {\n  // \tamount : '',\n  // \ttransactionType : '',\n  // };\n\n  const {\n    newTransaction,\n    transDeposit,\n    transWithdraw,\n    addLog\n  } = bindActionCreators(actionCreators, dispatch); // isSelected is a boolean that updates once an account is checked\n\n  const isSelect = useSelector(state => state.user.isSelected); // user state\n\n  const user = useSelector(state => state.user.user); // const handleRadios = evt => {\n  // \transaction = evt.target.value;\n  // }\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const formSubmit = {\n      amount: amount,\n      transactionType: transaction\n    }; // if(formSubmit.transactionType === ''){\n\n    if (transaction === '') {\n      alert('Unable to process function, ensure that the form is completed');\n    } else {\n      setAmount('');\n      setTransaction('');\n      evt.target.reset();\n      initBank(formSubmit);\n      newTransaction(formSubmit);\n    }\n  };\n\n  const initBank = formData => {\n    {\n      formData.transactionType === \"deposit\" ? transDeposit(formData.amount) : transWithdraw(formData.amount);\n      updateUser();\n    }\n    ;\n  };\n\n  const updateUser = () => {\n    const d = new Date();\n    const date = d.getDate();\n    const month = parseInt(d.getMonth()) + 1;\n    const year = d.getFullYear();\n    const transLog = {\n      id: 0,\n      userID: user.id,\n      transactionDate: date + '.' + month + '.' + year,\n      transactionType: transaction,\n      transactionAmount: amount\n    };\n    user.transactions.length === 1 ? transLog.id = 1 : transLog.id = parseInt(user.transactions.length) + 1;\n    user.transactions.push(transLog);\n    putUser();\n  };\n\n  const putUser = async () => {\n    console.log('user from put function', user);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"form\",\n    autoComplete: \"off\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"form--title\",\n      children: \"banking transactions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 4\n    }, this), isSelect ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"form--selected--user\",\n        children: [\"account selected => \", user.firstName, \" \", user.lastName, \"  \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 72\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 78\n        }, this), \"  current balance =>   $\", user.amount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form--input--wrapper\",\n        name: \"text\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\" // className=\"form--input\"\n          ,\n          className: `form--input`,\n          value: amount,\n          onChange: evt => setAmount(evt.target.value),\n          pattern: \"[0-9]{1,10000}\",\n          name: \"text--amount\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"form--input--label amount--input--label\",\n          children: \"amount to be tendered\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form--input--wrapper\",\n        name: \"radio\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          className: \"form--input\",\n          name: \"radios\",\n          id: \"radio--deposit\" // value = \"Deposit\"\n          // onChange = {handleRadios}\n          ,\n          \"data-value\": \"deposit\",\n          value: transaction,\n          onChange: evt => setTransaction(evt.target.getAttribute('data-value')) // onChange = {(evt) => setDeposit(evt.target.value)}\n          // onChange = {(evt) => setDeposit(evt.currentTarget.checked)}\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"radio--deposit\",\n          className: \"form--input--label\",\n          children: \"deposit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          className: \"form--input\",\n          name: \"radios\",\n          id: \"radio--withdraw\",\n          \"data-value\": \"withdraw\",\n          value: transaction,\n          onChange: evt => setTransaction(evt.target.getAttribute('data-value')) // value = \"Withdraw\"\n          // onChange = {handleRadios}\n          // onChange = {(evt) => setDeposit(evt.target.value)}\n          // onChange = {(evt) => setWithdraw(evt.currentTarget.checked)}\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"radio--withdraw\",\n          className: \"form--input--label\",\n          children: \"withdraw\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        className: \"form--submit\",\n        value: \"complete transaction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"form--selected--user\",\n      children: \"select an account to perform a transaction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 5\n    }, this), \";\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Form, \"CYpMX+Gay897x1qmDGVc0PL3Yqg=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["/home/emilleh/projects/React/github/react-redux/src/components/form.js"],"names":["React","useState","useSelector","useDispatch","bindActionCreators","actionCreators","Form","dispatch","amount","setAmount","transaction","setTransaction","newTransaction","transDeposit","transWithdraw","addLog","isSelect","state","user","isSelected","handleSubmit","evt","preventDefault","formSubmit","transactionType","alert","target","reset","initBank","formData","updateUser","d","Date","date","getDate","month","parseInt","getMonth","year","getFullYear","transLog","id","userID","transactionDate","transactionAmount","transactions","length","push","putUser","console","log","firstName","lastName","value","getAttribute"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { bindActionCreators } from 'redux';\nimport { actionCreators } from '../state/index';\n\n\n\n\nconst Form = () => {\n\tconst dispatch = useDispatch();\n\tconst [amount, setAmount] = useState(\"\");\n\tconst [transaction, setTransaction] = useState(\"\");\n\t// const [deposit, setDeposit] = useState(false);\n\t// const [withdraw, setWithdraw] = useState(false);\n\n\t// const submittedData = {\n\t// \tamount : '',\n\t// \ttransactionType : '',\n\t// };\n\n\tconst { newTransaction,  transDeposit, transWithdraw, addLog} = bindActionCreators(actionCreators, dispatch);\n\n\t// isSelected is a boolean that updates once an account is checked\n\tconst isSelect = useSelector( (state) => state.user.isSelected );\n\n\t// user state\n\tconst user = useSelector( (state) => state.user.user );\n\n\n\n\t// const handleRadios = evt => {\n\t// \transaction = evt.target.value;\n\t// }\n\t\n\n\tconst handleSubmit = evt => {\n\t\tevt.preventDefault();\n\t\tconst formSubmit = {\n\t\t\tamount : amount,\n\t\t\ttransactionType : transaction\n\t\t}\n\n\t\t// if(formSubmit.transactionType === ''){\n\t\t\tif(transaction === ''){\n\t\t\talert('Unable to process function, ensure that the form is completed');\n\t\t}\n\t\telse{\n\t\t\tsetAmount('');\n\t\t\tsetTransaction('');\n\t\t\tevt.target.reset();\n\t\t\tinitBank(formSubmit);\n\t\t\tnewTransaction(formSubmit);\n\t\t}\n\t}\n\n\tconst initBank = (formData) => {\n\t\t{\n\t\t\tformData.transactionType === \"deposit\" ? (\n\t\t\t\ttransDeposit(formData.amount)\n\t\t\t):(\n\t\t\t\ttransWithdraw(formData.amount)\n\t\t\t)\n\t\t\tupdateUser();\n\t\t};\n\t}\n\n\tconst updateUser = () => {\n\t\tconst d = new Date();\n\t\tconst date = d.getDate();\n\t\tconst month = parseInt(d.getMonth()) + 1;\n\t\tconst year = d.getFullYear();\n\t\tconst transLog = {\n\t\t\tid : 0,\n\t\t\tuserID : user.id,\n\t\t\ttransactionDate : date + '.' + month + '.' + year,\n\t\t\ttransactionType : transaction,\n\t\t\ttransactionAmount : amount\n\t\t}\n\t\tuser.transactions.length === 1 ? transLog.id = 1 : transLog.id = parseInt(user.transactions.length) + 1;\n\t\tuser.transactions.push(transLog);\n\t\tputUser();\n\t}\n\n\tconst putUser = async () => {\n\t\tconsole.log('user from put function', user);\n\t}\n\n\n\treturn (\n\t\t<form className=\"form\" autoComplete=\"off\" onSubmit={handleSubmit}>\n\t\t\t<span className=\"form--title\">banking transactions</span>\n\t\t\t{isSelect \n\t\t\t?(\t\n\t\t\t\t<>\n\t\t\t\t\t<span className=\"form--selected--user\">\n\t\t\t\t\t\taccount selected &#61;&gt; { user.firstName\t} {\tuser.lastName }  <br/> <br/>  current balance &#61;&gt;   ${ user.amount }\n\t\t\t\t\t</span>\n\t\t\t\t\t<div className=\"form--input--wrapper\" name=\"text\">\n\t\t\t\t\t\t<input \n\t\t\t\t\t\t\ttype=\"text\" \n\t\t\t\t\t\t\t// className=\"form--input\"\n\t\t\t\t\t\t\tclassName={`form--input`}\n\t\t\t\t\t\t\tvalue = {amount}\n\t\t\t\t\t\t\tonChange = { (evt) => setAmount(evt.target.value) } \n\t\t\t\t\t\t\tpattern=\"[0-9]{1,10000}\"\n\t\t\t\t\t\t\tname=\"text--amount\"\n\t\t\t\t\t\t\trequired\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<label className=\"form--input--label amount--input--label\">amount to be tendered</label>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"form--input--wrapper\" name=\"radio\">\n\t\t\t\t\t\t<input \n\t\t\t\t\t\t\ttype=\"radio\" \n\t\t\t\t\t\t\tclassName=\"form--input\"\n\t\t\t\t\t\t\tname=\"radios\"\n\t\t\t\t\t\t\tid=\"radio--deposit\"\n\t\t\t\t\t\t\t// value = \"Deposit\"\n\t\t\t\t\t\t\t// onChange = {handleRadios}\n\t\t\t\t\t\t\tdata-value = \"deposit\"\n\t\t\t\t\t\t\tvalue = {transaction}\n\t\t\t\t\t\t\tonChange = { evt => setTransaction(evt.target.getAttribute('data-value'))}\n\t\t\t\t\t\t\t// onChange = {(evt) => setDeposit(evt.target.value)}\n\t\t\t\t\t\t\t// onChange = {(evt) => setDeposit(evt.currentTarget.checked)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<label \n\t\t\t\t\t\t\thtmlFor=\"radio--deposit\" \n\t\t\t\t\t\t\tclassName=\"form--input--label\">deposit</label>\n\t\t\t\t\t\t<input \n\t\t\t\t\t\t\ttype=\"radio\" \n\t\t\t\t\t\t\tclassName=\"form--input\" \n\t\t\t\t\t\t\tname=\"radios\"\n\t\t\t\t\t\t\tid=\"radio--withdraw\"\n\t\t\t\t\t\t\tdata-value = \"withdraw\"\n\t\t\t\t\t\t\tvalue = {transaction}\n\t\t\t\t\t\t\tonChange = { evt => setTransaction(evt.target.getAttribute('data-value'))}\n\t\t\t\t\t\t\t// value = \"Withdraw\"\n\t\t\t\t\t\t\t// onChange = {handleRadios}\n\t\t\t\t\t\t\t// onChange = {(evt) => setDeposit(evt.target.value)}\n\t\t\t\t\t\t\t// onChange = {(evt) => setWithdraw(evt.currentTarget.checked)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<label \n\t\t\t\t\t\t\thtmlFor=\"radio--withdraw\" \n\t\t\t\t\t\t\tclassName=\"form--input--label\">withdraw</label>\n\t\t\t\t\t</div>\n\t\t\t\t\t<input type=\"submit\" className=\"form--submit\" value=\"complete transaction\"/>\n\t\t\t\t</>\n\t\t\t\t)\n\t\t\t: (\n\t\t\t\t<span className=\"form--selected--user\">\n\t\t\t \t\tselect an account to perform a transaction\n\t\t\t\t</span>\n\t\t\t)};\n\t\t</form>\n\t)\n}\n\nexport default Form;\n"]},"metadata":{},"sourceType":"module"}